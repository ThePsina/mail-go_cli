// Code generated by MockGen. DO NOT EDIT.
// Source: logic.go

// Package mock is a generated GoMock package.
package mock

import (
	entity "cli/domain/entity"
	repository "cli/domain/repository"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAppLogic is a mock of AppLogic interface
type MockAppLogic struct {
	ctrl     *gomock.Controller
	recorder *MockAppLogicMockRecorder
}

// MockAppLogicMockRecorder is the mock recorder for MockAppLogic
type MockAppLogicMockRecorder struct {
	mock *MockAppLogic
}

// NewMockAppLogic creates a new mock instance
func NewMockAppLogic(ctrl *gomock.Controller) *MockAppLogic {
	mock := &MockAppLogic{ctrl: ctrl}
	mock.recorder = &MockAppLogicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAppLogic) EXPECT() *MockAppLogicMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockAppLogic) Send(connection entity.Connection, inf entity.ClientInformation) (repository.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", connection, inf)
	ret0, _ := ret[0].(repository.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send
func (mr *MockAppLogicMockRecorder) Send(connection, inf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockAppLogic)(nil).Send), connection, inf)
}
